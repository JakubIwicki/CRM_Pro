{
    "openapi": "3.0.3",
    "info": {
        "title": "CRM API",
        "description": "A comprehensive CRM API for managing clients, orders, products, and services",
        "version": "1.0.0",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        }
    },
    "servers": [
        {
            "url": "http://localhost:3000/api",
            "description": "Development server"
        }
    ],
    "components": {
        "schemas": {
            "User": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "description": "Unique identifier for the user",
                        "example": 1
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for the user",
                        "example": "john_doe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email address for the user",
                        "example": "john@example.com"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the user was created",
                        "example": "2023-01-01T12:00:00Z"
                    }
                },
                "required": [
                    "username"
                ]
            },
            "UserRegistration": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username for the user",
                        "example": "john_doe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email address for the user",
                        "example": "john@example.com"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the user",
                        "example": "securePassword123"
                    }
                },
                "required": [
                    "username",
                    "email",
                    "password"
                ]
            },
            "UserLogin": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email address for login",
                        "example": "john@example.com"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for login",
                        "example": "securePassword123"
                    }
                },
                "required": [
                    "email",
                    "password"
                ]
            },
            "Client": {
                "type": "object",
                "properties": {
                    "client_id": {
                        "type": "integer",
                        "description": "Unique identifier for the client",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the client",
                        "example": "John Smith"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email address of the client",
                        "example": "john.smith@example.com"
                    },
                    "phone": {
                        "type": "string",
                        "description": "Phone number of the client",
                        "example": "+1234567890"
                    },
                    "address": {
                        "type": "string",
                        "description": "Address of the client",
                        "example": "123 Main St, City, State 12345"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the client was created",
                        "example": "2023-01-01T12:00:00Z"
                    },
                    "orders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Order"
                        },
                        "description": "Orders associated with the client"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "ClientInput": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the client",
                        "example": "John Smith"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email address of the client",
                        "example": "john.smith@example.com"
                    },
                    "phone": {
                        "type": "string",
                        "description": "Phone number of the client",
                        "example": "+1234567890"
                    },
                    "address": {
                        "type": "string",
                        "description": "Address of the client",
                        "example": "123 Main St, City, State 12345"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "Order": {
                "type": "object",
                "properties": {
                    "order_id": {
                        "type": "integer",
                        "description": "Unique identifier for the order",
                        "example": 1
                    },
                    "client_id": {
                        "type": "integer",
                        "description": "ID of the client who placed the order",
                        "example": 1
                    },
                    "order_date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the order was placed",
                        "example": "2023-01-01T12:00:00Z"
                    },
                    "total_amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Total amount for the order",
                        "example": 299.99
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Processing",
                            "Completed",
                            "Cancelled"
                        ],
                        "description": "Current status of the order",
                        "example": "Pending"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Service"
                        },
                        "description": "Services included in the order"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Product"
                        },
                        "description": "Products included in the order"
                    }
                },
                "required": [
                    "client_id"
                ]
            },
            "OrderInput": {
                "type": "object",
                "properties": {
                    "client_id": {
                        "type": "integer",
                        "description": "ID of the client who placed the order",
                        "example": 1
                    },
                    "total_amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Total amount for the order",
                        "example": 299.99
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Processing",
                            "Completed",
                            "Cancelled"
                        ],
                        "description": "Current status of the order",
                        "example": "Pending"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "service_id": {
                                    "type": "integer",
                                    "example": 1
                                }
                            }
                        },
                        "description": "Services to include in the order"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "product_id": {
                                    "type": "integer",
                                    "example": 1
                                }
                            }
                        },
                        "description": "Products to include in the order"
                    }
                },
                "required": [
                    "client_id"
                ]
            },
            "Product": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "integer",
                        "description": "Unique identifier for the product",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the product",
                        "example": "Premium Software License"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Digital",
                            "Service",
                            "Hardware"
                        ],
                        "description": "Type of the product",
                        "example": "Digital"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "description": "Price of the product",
                        "example": 99.99
                    }
                },
                "required": [
                    "name",
                    "type"
                ]
            },
            "ProductInput": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the product",
                        "example": "Premium Software License"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Digital",
                            "Service",
                            "Hardware"
                        ],
                        "description": "Type of the product",
                        "example": "Digital"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "description": "Price of the product",
                        "example": 99.99
                    }
                },
                "required": [
                    "name",
                    "type"
                ]
            },
            "Service": {
                "type": "object",
                "properties": {
                    "service_id": {
                        "type": "integer",
                        "description": "Unique identifier for the service",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service",
                        "example": "Website Development"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Development",
                            "Design",
                            "Marketing",
                            "Security"
                        ],
                        "description": "Type of the service",
                        "example": "Development"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "description": "Price of the service",
                        "example": 199.99
                    }
                },
                "required": [
                    "name",
                    "type"
                ]
            },
            "ServiceInput": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the service",
                        "example": "Website Development"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Development",
                            "Design",
                            "Marketing",
                            "Security"
                        ],
                        "description": "Type of the service",
                        "example": "Development"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "description": "Price of the service",
                        "example": 199.99
                    }
                },
                "required": [
                    "name",
                    "type"
                ]
            },
            "DashboardData": {
                "type": "object",
                "properties": {
                    "totalClients": {
                        "type": "integer",
                        "description": "Total number of clients",
                        "example": 150
                    },
                    "activeOrders": {
                        "type": "integer",
                        "description": "Number of active orders",
                        "example": 25
                    },
                    "totalServices": {
                        "type": "integer",
                        "description": "Total number of services",
                        "example": 12
                    },
                    "revenue": {
                        "type": "number",
                        "format": "float",
                        "description": "Revenue for the current month",
                        "example": 15500.50
                    },
                    "recentClients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Client"
                        },
                        "description": "Recently added clients"
                    },
                    "recentOrders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Order"
                        },
                        "description": "Recently placed orders"
                    }
                }
            },
            "AuthResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Login successful"
                    },
                    "token": {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    }
                }
            },
            "TokenValidation": {
                "type": "object",
                "properties": {
                    "validToken": {
                        "type": "boolean",
                        "description": "Whether the token is valid",
                        "example": true
                    }
                }
            },
            "Error": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "description": "Error message",
                        "example": "Resource not found"
                    }
                }
            },
            "Success": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "Operation success status",
                        "example": true
                    }
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "User authentication and authorization"
        },
        {
            "name": "Users",
            "description": "User management operations"
        },
        {
            "name": "Clients",
            "description": "Client management operations"
        },
        {
            "name": "Orders",
            "description": "Order management operations"
        },
        {
            "name": "Products",
            "description": "Product management operations"
        },
        {
            "name": "Services",
            "description": "Service management operations"
        },
        {
            "name": "Dashboard",
            "description": "Dashboard and analytics endpoints"
        }
    ],
    "paths": {
        "/auth/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "Create a new user account with username, email, and password",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRegistration"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User registered successfully"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - missing fields or email already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "description": "Authenticate user and return JWT token",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserLogin"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - missing email or password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Validate token",
                "description": "Check if the provided JWT token is valid",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token is valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenValidation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or missing token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenValidation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "description": "Retrieve all users (requires authentication)",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/clients": {
            "get": {
                "tags": [
                    "Clients"
                ],
                "summary": "Get all clients",
                "description": "Retrieve all clients with their associated orders",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved clients",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Client"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Clients"
                ],
                "summary": "Create a new client",
                "description": "Add a new client to the system",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Client created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Client"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/clients/{id}": {
            "get": {
                "tags": [
                    "Clients"
                ],
                "summary": "Get client by ID",
                "description": "Retrieve a specific client by their ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Client ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved client",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Client"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Client not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Clients"
                ],
                "summary": "Update client",
                "description": "Update an existing client's information",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Client ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Client updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Client"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Client not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Clients"
                ],
                "summary": "Delete client",
                "description": "Remove a client from the system",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Client ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Client not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get all orders",
                "description": "Retrieve all orders in the system",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Order"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new order",
                "description": "Create a new order with associated services and products",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get order by ID",
                "description": "Retrieve a specific order by its ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Order ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Orders"
                ],
                "summary": "Update order",
                "description": "Update an existing order",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Order ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Order updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Orders"
                ],
                "summary": "Delete order",
                "description": "Remove an order from the system",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Order ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get all products",
                "description": "Retrieve all products in the system",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "description": "Add a new product to the catalog",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get product by ID",
                "description": "Retrieve a specific product by its ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Product ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved product",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update product",
                "description": "Update an existing product",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Product ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Delete product",
                "description": "Remove a product from the catalog",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Product ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/services": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Get all services",
                "description": "Retrieve all services in the system",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved services",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Service"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Services"
                ],
                "summary": "Create a new service",
                "description": "Add a new service to the catalog",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Service"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/services/{id}": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Get service by ID",
                "description": "Retrieve a specific service by its ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Service ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved service",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Service"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Services"
                ],
                "summary": "Update service",
                "description": "Update an existing service",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Service ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Service"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Services"
                ],
                "summary": "Delete service",
                "description": "Remove a service from the catalog",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Service ID",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/info/dashboard": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get dashboard data",
                "description": "Retrieve dashboard analytics including client count, orders, revenue, and recent activities",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved dashboard data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardData"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}